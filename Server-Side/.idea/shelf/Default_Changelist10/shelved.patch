Index: src/test/java/com/murex/retail/experience/MainTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.murex.retail.experience;\r\n\r\nimport org.junit.Assert;\r\nimport org.junit.jupiter.api.Assertions;\r\nimport org.junit.jupiter.api.Test;\r\nimport static com.murex.retail.experience.Main.*;\r\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\nimport java.io.IOException;\r\nimport java.nio.file.NoSuchFileException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\n\r\nclass MainTest {\r\n\r\n\r\n    @Test\r\n    void test_read_in_csv() throws IOException {\r\n        List<String> expectedResult = (Arrays.asList(\"JAVA,PYTHON,C\", \"ECLIPSE,INTELLIJ,JCREATOR\"));\r\n        List<String> actualResult = readCSV(\"src/test/resources/test_file.csv\");\r\n        assertEquals(expectedResult, actualResult);\r\n    }\r\n\r\n    @Test\r\n    void test_replace_comma_method() throws IOException {\r\n        List<String> actualResult = readCSV(\"src/test/resources/test_file.csv\");\r\n        List<String> expectedResult = Arrays.asList(\"JAVA\\t|\\tPYTHON\\t|\\tC\", \"ECLIPSE\\t|\\tINTELLIJ\\t|\\tJCREATOR\");\r\n        actualResult = replaceCommasAndLog(actualResult);\r\n        assertEquals(expectedResult, actualResult);\r\n    }\r\n\r\n    @Test\r\n    void test_empty_csv() throws IOException {\r\n        List<String> expectedResult = new ArrayList<String>(Arrays.asList(\"\"));\r\n        List<String> actualResult = readCSV(\"src/test/resources/empty.csv\");\r\n        assertEquals(expectedResult, actualResult);\r\n    }\r\n\r\n    @Test\r\n    public void test_wrong_file_location() {\r\n        Assertions.assertThrows(NoSuchFileException.class, () -> readCSV(\"src/test/resources/wrong.csv\"));\r\n    }\r\n\r\n    @Test\r\n    void test_wrong_format_file() {\r\n        Assertions.assertThrows(IOException.class, () -> readCSV(\"src/test/resources/wrong_format.docx\"));\r\n    }\r\n\r\n\r\n    @Test\r\n    void test_create_object_method(){\r\n        List<String> test = (Arrays.asList(\"a,b,c,d,e,f,g,h,i,j,k,l,m,2,3\"));\r\n        ComputerComponent.Builder cc = new ComputerComponent.Builder(\"a\",\"b\",\"c\",2, 3);\r\n        cc.brand(\"d\");\r\n        cc.productLine(\"e\");\r\n        cc.numOfCores(\"f\");\r\n        cc.procClkSpd(\"g\");\r\n        cc.graphClkSpd(\"h\");\r\n        cc.dimension(\"i\");\r\n        cc.resolution(\"j\");\r\n        cc.colour(\"k\");\r\n        cc.intrfce(\"l\");\r\n        cc.size(\"m\");\r\n        ComputerComponent expectedObject = cc.build();\r\n        int x = expectedObject.getPrice();\r\n        List<ComputerComponent> expectedResult = new ArrayList<ComputerComponent>();\r\n        expectedResult.add(expectedObject);\r\n        List<ComputerComponent> actualResult = createObjects(test);\r\n        assertEquals(expectedResult.toString(),actualResult.toString());\r\n    }\r\n\r\n    @Test\r\n    void test_sort_and_print_method(){\r\n        List<String> test = (Arrays.asList(\"a,b,c,d,e,f,g,h,i,j,k,l,m,2,3\",\r\n                                           \"a,b,b,d,g,h,d,t,g,f,s,f,n,3,4\",\r\n                                           \"a,c,b,d,g,h,d,t,g,f,s,f,n,3,4\",\r\n                                           \"a,c,a,d,g,h,d,t,g,f,s,f,n,1,4\",\r\n                                           \"a,a,b,d,g,h,d,t,g,f,s,f,n,3,4\"));\r\n        String actualResult = (sortAndPrint(createObjects(test))).toString();\r\n        String expectedResult = \"[ComputerComponent [a\"+\"     \"+\"a\"+\"     \"+\"b\"+\"     \"+\"d\"+\"     \"+\"g\"+\"     \"+\"h\"+\"     \"+\"d\"+\"     \"+\"t\"+\"     \"+\"g\"+\"     \"+\"f\"+\"     \"+\"s\"+\"     \"+\"f\"+\"     \"+\"n\"+\"     \"+\"3\"+\"     \"+\"4], ComputerComponent [a\"+\"     \"+\"b\"+\"     \"+\"b\"+\"     \"+\"d\"+\"     \"+\"g\"+\"     \"+\"h\"+\"     \"+\"d\"+\"     \"+\"t\"+\"     \"+\"g\"+\"     \"+\"f\"+\"     \"+\"s\"+\"     \"+\"f\"+\"     \"+\"n\"+\"     \"+\"3\"+\"     \"+\"4], ComputerComponent [a\"+\"     \"+\"b\"+\"     \"+\"c\"+\"     \"+\"d\"+\"     \"+\"e\"+\"     \"+\"f\"+\"     \"+\"g\"+\"     \"+\"h\"+\"     \"+\"i\"+\"     \"+\"j\"+\"     \"+\"k\"+\"     \"+\"l\"+\"     \"+\"m\"+\"     \"+\"2\"+\"     \"+\"3], ComputerComponent [a\"+\"     \"+\"c\"+\"     \"+\"a\"+\"     \"+\"d\"+\"     \"+\"g\"+\"     \"+\"h\"+\"     \"+\"d\"+\"     \"+\"t\"+\"     \"+\"g\"+\"     \"+\"f\"+\"     \"+\"s\"+\"     \"+\"f\"+\"     \"+\"n\"+\"     \"+\"1\"+\"     \"+\"4], ComputerComponent [a\"+\"     \"+\"c\"+\"     \"+\"b\"+\"     \"+\"d\"+\"     \"+\"g\"+\"     \"+\"h\"+\"     \"+\"d\"+\"     \"+\"t\"+\"     \"+\"g\"+\"     \"+\"f\"+\"     \"+\"s\"+\"     \"+\"f\"+\"     \"+\"n\"+\"     \"+\"3\"+\"     \"+\"4]]\";\r\n        assertEquals(expectedResult, actualResult);\r\n    }\r\n\r\n    @Test\r\n    void test_get_avg_price_method(){\r\n        List<String> test = (Arrays.asList(\"a,b,c,d,e,f,g,h,i,j,k,l,m,2,3\",\r\n                \"a,b,b,d,g,h,d,t,g,f,s,f,n,2,4\",\r\n                \"a,c,b,d,g,h,d,t,g,f,s,f,n,4,4\",\r\n                \"a,c,a,d,g,h,d,t,g,f,s,f,n,6,4\",\r\n                \"a,a,b,d,g,h,d,t,g,f,s,f,n,6,4\"));\r\n        int actualResult = compute_and_print_avg_price_of_all_components((createObjects(test)));\r\n        assertEquals(4, actualResult);\r\n    }\r\n\r\n    @Test\r\n    void test_get_avg_price_of_cpu_components_method(){\r\n        List<String> test = (Arrays.asList(\"a,CPU,c,d,e,f,g,h,i,j,k,l,m,3,3\",\r\n                \"a,CPU,b,d,g,h,d,t,g,f,s,f,n,2,4\",\r\n                \"a,CPU,b,d,g,h,d,t,g,f,s,f,n,4,4\",\r\n                \"a,c,a,d,g,h,d,t,g,f,s,f,n,6,4\",\r\n                \"a,a,b,d,g,h,d,t,g,f,s,f,n,6,4\"));\r\n        int actualResult = compute_and_print_avg_price_of_CPU_components((createObjects(test)));\r\n        assertEquals(3, actualResult);\r\n    }\r\n\r\n    @Test\r\n    void test_method_returning_cheapest_object_details(){\r\n        List<String> test = (Arrays.asList(\"a,b,c,d,e,f,g,h,i,j,k,l,m,2,3\",\r\n                \"a,b,b,d,g,h,d,t,g,f,s,f,n,2,4\",\r\n                \"a,c,b,d,g,h,d,t,g,f,s,f,n,4,4\",\r\n                \"a,c,a,d,g,h,d,t,g,f,s,f,n,1,4\",\r\n                \"a,a,b,d,g,h,d,t,g,f,s,f,n,6,4\"));\r\n        String actualResult = cheapestComponent((createObjects(test)));\r\n        assertEquals(\"ComputerComponent [a\"+\"     \"+\"c\"+\"     \"+\"a\"+\"     \"+\"d\"+\"     \"+\"g\"+\"     \"+\"h\"+\"     \"+\"d\"+\"     \"+\"t\"+\"     \"+\"g\"+\"     \"+\"f\"+\"     \"+\"s\"+\"     \"+\"f\"+\"     \"+\"n\"+\"     \"+\"1\"+\"     \"+\"4]\", actualResult);\r\n\r\n    }\r\n\r\n    @Test\r\n    void test_print_most_expensive_of_each_category(){\r\n        List<String> test = (Arrays.asList(\"0,CPU,c,d,e,f,g,h,i,j,k,l,m,2,3\",\r\n                \"1,CPU,b,d,g,h,d,t,g,f,s,f,n,5,4\",\r\n                \"2,Monitor,b,d,g,h,d,t,g,f,s,f,n,4,4\",\r\n                \"3,Monitor,a,d,g,h,d,t,g,f,s,f,n,1,4\",\r\n                \"4,Keyboard,b,d,g,h,d,t,g,f,s,f,n,6,4\"));\r\n            String actualResult = printMostExpensiveOfEachCategory(createObjects(test));\r\n            String expectedResult = \"{Monitor=Optional[ComputerComponent [2\"+\"     \"+\"Monitor\"+\"     \"+\"b\"+\"     \"+\"d\"+\"     \"+\"g\"+\"     \"+\"h\"+\"     \"+\"d\"+\"     \"+\"t\"+\"     \"+\"g\"+\"     \"+\"f\"+\"     \"+\"s\"+\"     \"+\"f\"+\"     \"+\"n\"+\"     \"+\"4\"+\"     \"+\"4]], Keyboard=Optional[ComputerComponent [4\"+\"     \"+\"Keyboard\"+\"     \"+\"b\"+\"     \"+\"d\"+\"     \"+\"g\"+\"     \"+\"h\"+\"     \"+\"d\"+\"     \"+\"t\"+\"     \"+\"g\"+\"     \"+\"f\"+\"     \"+\"s\"+\"     \"+\"f\"+\"     \"+\"n\"+\"     \"+\"6\"+\"     \"+\"4]], CPU=Optional[ComputerComponent [1\"+\"     \"+\"CPU\"+\"     \"+\"b\"+\"     \"+\"d\"+\"     \"+\"g\"+\"     \"+\"h\"+\"     \"+\"d\"+\"     \"+\"t\"+\"     \"+\"g\"+\"     \"+\"f\"+\"     \"+\"s\"+\"     \"+\"f\"+\"     \"+\"n\"+\"     \"+\"5\"+\"     \"+\"4]]}\";\r\n            assertEquals(expectedResult, actualResult);\r\n    }\r\n\r\n    @Test\r\n    void test_report_of_quantity_of_components_per_category(){\r\n        List<String> test = (Arrays.asList(\"0,CPU,c,d,e,f,g,h,i,j,k,l,m,2,3\",\r\n                \"1,CPU,b,d,g,h,d,t,g,f,s,f,n,5,4\",\r\n                \"2,Monitor,b,d,g,h,d,t,g,f,s,f,n,4,4\",\r\n                \"3,Monitor,a,d,g,h,d,t,g,f,s,f,n,1,4\",\r\n                \"4,Keyboard,b,d,g,h,d,t,g,f,s,f,n,6,4\"));\r\n        String actualResult = reportOfQuantityOfComponentsByCategory(createObjects(test));\r\n        String expectedResult = \"{Monitor=2, Keyboard=1, CPU=2}\";\r\n        assertEquals(expectedResult, actualResult);\r\n    }\r\n\r\n    @Test\r\n    void test_report_of_quantity_of_components_per_category_and_brand(){\r\n        List<String> test = (Arrays.asList(\"0,CPU,c,Intel,e,f,g,h,i,j,k,l,m,2,3\",\r\n                \"1,CPU,b,AMD,g,h,d,t,g,f,s,f,n,5,4\",\r\n                \"2,Monitor,b,Sony,g,h,d,t,g,f,s,f,n,4,4\",\r\n                \"3,Monitor,a,Sony,g,h,d,t,g,f,s,f,n,1,4\",\r\n                \"4,Keyboard,b,Samsung,g,h,d,t,g,f,s,f,n,6,4\"));\r\n        String actualResult = reportOfQuantityOfComponentsByCategoryAndBrand(createObjects(test));\r\n        String expectedResult = \"{Monitor={Sony=2}, Keyboard={Samsung=1}, CPU={AMD=1, Intel=1}}\";\r\n        assertEquals(expectedResult, actualResult);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/com/murex/retail/experience/MainTest.java	(revision 2525ebc8e147b4bbc6e23740858e64176adae7f6)
+++ src/test/java/com/murex/retail/experience/MainTest.java	(date 1580990540179)
@@ -77,9 +77,14 @@
                                            "a,b,b,d,g,h,d,t,g,f,s,f,n,3,4",
                                            "a,c,b,d,g,h,d,t,g,f,s,f,n,3,4",
                                            "a,c,a,d,g,h,d,t,g,f,s,f,n,1,4",
+                                           "a,a,b,d,g,h,d,t,g,f,s,f,n,3,4",
+                                           "a,a,b,d,g,h,d,t,g,f,s,f,n,3,4",
+                                           "a,a,b,d,g,h,d,t,g,f,s,f,n,3,4",
+                                           "a,a,b,d,g,h,d,t,g,f,s,f,n,3,4",
+                                           "a,a,b,d,g,h,d,t,g,f,s,f,n,3,4",
                                            "a,a,b,d,g,h,d,t,g,f,s,f,n,3,4"));
         String actualResult = (sortAndPrint(createObjects(test))).toString();
-        String expectedResult = "[ComputerComponent [a"+"     "+"a"+"     "+"b"+"     "+"d"+"     "+"g"+"     "+"h"+"     "+"d"+"     "+"t"+"     "+"g"+"     "+"f"+"     "+"s"+"     "+"f"+"     "+"n"+"     "+"3"+"     "+"4], ComputerComponent [a"+"     "+"b"+"     "+"b"+"     "+"d"+"     "+"g"+"     "+"h"+"     "+"d"+"     "+"t"+"     "+"g"+"     "+"f"+"     "+"s"+"     "+"f"+"     "+"n"+"     "+"3"+"     "+"4], ComputerComponent [a"+"     "+"b"+"     "+"c"+"     "+"d"+"     "+"e"+"     "+"f"+"     "+"g"+"     "+"h"+"     "+"i"+"     "+"j"+"     "+"k"+"     "+"l"+"     "+"m"+"     "+"2"+"     "+"3], ComputerComponent [a"+"     "+"c"+"     "+"a"+"     "+"d"+"     "+"g"+"     "+"h"+"     "+"d"+"     "+"t"+"     "+"g"+"     "+"f"+"     "+"s"+"     "+"f"+"     "+"n"+"     "+"1"+"     "+"4], ComputerComponent [a"+"     "+"c"+"     "+"b"+"     "+"d"+"     "+"g"+"     "+"h"+"     "+"d"+"     "+"t"+"     "+"g"+"     "+"f"+"     "+"s"+"     "+"f"+"     "+"n"+"     "+"3"+"     "+"4]]";
+        String expectedResult = "[ComputerComponent [a"+"     "+"a"+"     "+"b"+"     "+"d"+"     "+"g"+"     "+"h"+"     "+"d"+"     "+"t"+"     "+"g"+"     "+"f"+"     "+"s"+"     "+"f"+"     "+"n"+"     "+"3"+"     "+"4], ComputerComponent [a"+"     "+"a"+"     "+"b"+"     "+"d"+"     "+"g"+"     "+"h"+"     "+"d"+"     "+"t"+"     "+"g"+"     "+"f"+"     "+"s"+"     "+"f"+"     "+"n"+"     "+"3"+"     "+"4], ComputerComponent [a"+"     "+"a"+"     "+"b"+"     "+"d"+"     "+"g"+"     "+"h"+"     "+"d"+"     "+"t"+"     "+"g"+"     "+"f"+"     "+"s"+"     "+"f"+"     "+"n"+"     "+"3"+"     "+"4], ComputerComponent [a"+"     "+"a"+"     "+"b"+"     "+"d"+"     "+"g"+"     "+"h"+"     "+"d"+"     "+"t"+"     "+"g"+"     "+"f"+"     "+"s"+"     "+"f"+"     "+"n"+"     "+"3"+"     "+"4], ComputerComponent [a"+"     "+"a"+"     "+"b"+"     "+"d"+"     "+"g"+"     "+"h"+"     "+"d"+"     "+"t"+"     "+"g"+"     "+"f"+"     "+"s"+"     "+"f"+"     "+"n"+"     "+"3"+"     "+"4], ComputerComponent [a"+"     "+"a"+"     "+"b"+"     "+"d"+"     "+"g"+"     "+"h"+"     "+"d"+"     "+"t"+"     "+"g"+"     "+"f"+"     "+"s"+"     "+"f"+"     "+"n"+"     "+"3"+"     "+"4], ComputerComponent [a"+"     "+"b"+"     "+"b"+"     "+"d"+"     "+"g"+"     "+"h"+"     "+"d"+"     "+"t"+"     "+"g"+"     "+"f"+"     "+"s"+"     "+"f"+"     "+"n"+"     "+"3"+"     "+"4], ComputerComponent [a"+"     "+"b"+"     "+"c"+"     "+"d"+"     "+"e"+"     "+"f"+"     "+"g"+"     "+"h"+"     "+"i"+"     "+"j"+"     "+"k"+"     "+"l"+"     "+"m"+"     "+"2"+"     "+"3], ComputerComponent [a"+"     "+"c"+"     "+"a"+"     "+"d"+"     "+"g"+"     "+"h"+"     "+"d"+"     "+"t"+"     "+"g"+"     "+"f"+"     "+"s"+"     "+"f"+"     "+"n"+"     "+"1"+"     "+"4], ComputerComponent [a"+"     "+"c"+"     "+"b"+"     "+"d"+"     "+"g"+"     "+"h"+"     "+"d"+"     "+"t"+"     "+"g"+"     "+"f"+"     "+"s"+"     "+"f"+"     "+"n"+"     "+"3"+"     "+"4]]";
         assertEquals(expectedResult, actualResult);
     }
 
Index: log/DNTP.out
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- log/DNTP.out	(revision 2525ebc8e147b4bbc6e23740858e64176adae7f6)
+++ log/DNTP.out	(date 1580991155457)
@@ -1,0 +1,2 @@
+2020-02-06 12:12:35.407 [main] INFO  Main:52 - JAVA	|	PYTHON	|	C
+2020-02-06 12:12:35.407 [main] INFO  Main:52 - ECLIPSE	|	INTELLIJ	|	JCREATOR
Index: src/main/java/com/murex/retail/experience/ComputerComponent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.murex.retail.experience;\r\n\r\npublic class ComputerComponent {\r\n\r\n\r\n    public static class Builder\r\n    {\r\n        private String id;\r\n        private String category;\r\n        private String name;\r\n        private String brand;\r\n        private String productLine;\r\n        private String numOfCores;\r\n        private String procClkSpd;\r\n        private String graphClkSpd;\r\n        private String dimension;\r\n        private String resolution;\r\n        private String colour;\r\n        private String intrfce;\r\n        private String size;\r\n        private int price;\r\n        private int quantity;\r\n\r\n        public Builder(String id, String category, String name, int price, int quantity){\r\n            this.id = id;\r\n            this.category = category;\r\n            this.name = name;\r\n            this.price = price;\r\n            this.quantity = quantity;\r\n        }\r\n\r\n        public ComputerComponent build(){\r\n            return new ComputerComponent(this);\r\n        }\r\n//        public Builder id(String id){\r\n//            this.id = id;\r\n//            return this;\r\n//        }\r\n//        public Builder category(String category){\r\n//            this.category = category;\r\n//            return this;\r\n//        }\r\n//        public Builder name(String name){\r\n//            this.name = name;\r\n//            return this;\r\n//        }\r\n        public Builder brand(String brand){\r\n            this.brand = brand;\r\n            return this;\r\n        }\r\n        public Builder productLine(String productLine){\r\n            this.productLine = productLine;\r\n            return this;\r\n        }\r\n        public Builder numOfCores(String numOfCores){\r\n            this.numOfCores = numOfCores;\r\n            return this;\r\n        }\r\n        public Builder procClkSpd(String procClkSpd){\r\n            this.procClkSpd = procClkSpd;\r\n            return this;\r\n        }\r\n        public Builder graphClkSpd(String graphClkSpd){\r\n            this.graphClkSpd = graphClkSpd;\r\n            return this;\r\n        }\r\n        public Builder dimension(String dimension){\r\n            this.dimension = dimension;\r\n            return this;\r\n        }\r\n        public Builder resolution(String resolution){\r\n            this.resolution = resolution;\r\n            return this;\r\n        }\r\n        public Builder colour(String colour){\r\n            this.colour = colour;\r\n            return this;\r\n        }\r\n        public Builder intrfce(String intrfce){\r\n            this.intrfce = intrfce;\r\n            return this;\r\n        }\r\n        public Builder size(String size){\r\n            this.size = size;\r\n            return this;\r\n        }\r\n//        public Builder price(int price){\r\n//            this.price = price;\r\n//            return this;\r\n//        }\r\n//        public Builder quantity(int quantity){\r\n//            this.quantity = quantity;\r\n//            return this;\r\n//        }\r\n    }\r\n    private final String id;\r\n    private final String category;\r\n    private final String name;\r\n    private final String productLine;\r\n    private final String brand;\r\n    private final String numOfCores;\r\n    private final String procClkSpd;\r\n    private final String graphClkSpd;\r\n    private final String dimension;\r\n    private final String resolution;\r\n    private final String colour;\r\n    private final String intrfce;\r\n    private final String size;\r\n    private final int price;\r\n    private final int quantity;\r\n\r\n    public ComputerComponent(Builder builder)\r\n    {\r\n        this.id = builder.id;\r\n        this.category = builder.category;\r\n        this.name = builder.name;\r\n        this.brand = builder.brand;\r\n        this.productLine = builder.productLine;\r\n        this.numOfCores = builder.numOfCores;\r\n        this.procClkSpd = builder.procClkSpd;\r\n        this.graphClkSpd = builder.graphClkSpd;\r\n        this.dimension = builder.dimension;\r\n        this.resolution = builder.resolution;\r\n        this.colour = builder.colour;\r\n        this.intrfce = builder.intrfce;\r\n        this.size = builder.size;\r\n        this.price = builder.price;\r\n        this.quantity = builder.quantity;\r\n    }\r\n    public String getId() {\r\n        return id;\r\n    }\r\n    public String getCategory() {\r\n        return category;\r\n    }\r\n    public String getName() {\r\n        return name;\r\n    }\r\n    public String getBrand() {\r\n        return brand;\r\n    }\r\n    public String getProductLine() {\r\n        return productLine;\r\n    }\r\n    public String getNumOfCores() {\r\n        return numOfCores;\r\n    }\r\n    public String getProcClkSpd() {\r\n        return procClkSpd;\r\n    }\r\n    public String getGraphClkSpd() {\r\n        return graphClkSpd;\r\n    }\r\n    public String getDimension() {\r\n        return dimension;\r\n    }\r\n    public String getResolution() {\r\n        return resolution;\r\n    }\r\n    public String getSize() {\r\n        return size;\r\n    }\r\n    public String getColour() {\r\n        return colour;\r\n    }\r\n    public String getIntrfce() {\r\n        return intrfce;\r\n    }\r\n    public int getPrice() {\r\n        return price;\r\n    }\r\n    public int getQuantity() {\r\n        return quantity;\r\n    }\r\n\r\n    @Override\r\n    public String toString(){\r\n        return \"ComputerComponent [\" + id +\"     \"+ category +\"     \"+  name +\"     \"+  brand +\"     \"+  productLine +\"     \"+  numOfCores +\"     \"+  procClkSpd +\"     \"+  graphClkSpd +\"     \"+  dimension +\"     \"+  resolution +\"     \"+  colour +\"     \"+  intrfce +\"     \"+ size +\"     \"+  price +\"     \"+  quantity + \"]\";\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/murex/retail/experience/ComputerComponent.java	(revision 2525ebc8e147b4bbc6e23740858e64176adae7f6)
+++ src/main/java/com/murex/retail/experience/ComputerComponent.java	(date 1580990455572)
@@ -32,18 +32,7 @@
         public ComputerComponent build(){
             return new ComputerComponent(this);
         }
-//        public Builder id(String id){
-//            this.id = id;
-//            return this;
-//        }
-//        public Builder category(String category){
-//            this.category = category;
-//            return this;
-//        }
-//        public Builder name(String name){
-//            this.name = name;
-//            return this;
-//        }
+
         public Builder brand(String brand){
             this.brand = brand;
             return this;
@@ -84,14 +73,7 @@
             this.size = size;
             return this;
         }
-//        public Builder price(int price){
-//            this.price = price;
-//            return this;
-//        }
-//        public Builder quantity(int quantity){
-//            this.quantity = quantity;
-//            return this;
-//        }
+
     }
     private final String id;
     private final String category;
Index: src/main/java/com/murex/retail/experience/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.murex.retail.experience;\r\n\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.security.cert.CollectionCertStoreParameters;\r\nimport java.util.*;\r\n\r\nimport org.apache.logging.log4j.LogManager;\r\nimport org.apache.logging.log4j.Logger;\r\n\r\nimport java.nio.file.NoSuchFileException;\r\nimport java.util.stream.Collectors;\r\n\r\n\r\npublic class Main {\r\n\r\n    private static final Logger logger = LogManager.getLogger(Main.class);\r\n    private static final String filePath = \"src/main/resources/Inventory.csv\";\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            List<String> commaSeparatedRecords = readCSV(filePath);\r\n            replaceCommasAndLog(commaSeparatedRecords);\r\n            List<ComputerComponent> listOfObjects = createObjects(commaSeparatedRecords);\r\n            sortAndPrint(listOfObjects);\r\n            compute_and_print_avg_price_of_all_components(listOfObjects);\r\n            compute_and_print_avg_price_of_CPU_components(listOfObjects);\r\n            cheapestComponent(listOfObjects);\r\n            System.out.println(printMostExpensiveOfEachCategory(listOfObjects));\r\n            System.out.println(reportOfQuantityOfComponentsByCategory(listOfObjects));\r\n            System.out.println(reportOfQuantityOfComponentsByCategoryAndBrand(listOfObjects));\r\n        } catch (NoSuchFileException e) {\r\n            logger.error(\"File not found\", e);\r\n\r\n        } catch (IOException e) {\r\n            logger.error(\"Error\", e);\r\n        }\r\n    }\r\n\r\n    public static List<String> readCSV(String filePath) throws IOException {\r\n        return Files.readAllLines(Paths.get(filePath));\r\n    }\r\n\r\n    public static List<String> replaceCommasAndLog(List<String> commaSeparatedRecords) {\r\n        List<String> tabSeparatedRecords = new ArrayList<>(commaSeparatedRecords.size());\r\n        for (String line : commaSeparatedRecords)\r\n            tabSeparatedRecords.add(line.replace(\",\", \"\\t|\\t\"));\r\n        for (String line : tabSeparatedRecords)\r\n            logger.info(line);\r\n        return tabSeparatedRecords;\r\n    }\r\n\r\n    public static List<ComputerComponent> createObjects(List<String> commaSeparatedRecords) {\r\n        List<ComputerComponent> listOfObjects = new ArrayList<ComputerComponent>();\r\n        ComputerComponent.Builder[] objects = new ComputerComponent.Builder[commaSeparatedRecords.size()];\r\n\r\n        for (int i = 0; i <commaSeparatedRecords.size(); i++) {\r\n\r\n            String[] csvList = (commaSeparatedRecords.get(i)).replaceAll(\"\\\\s\",\"\").split(\",\");\r\n            objects[i] = new ComputerComponent.Builder(csvList[0],csvList[1],csvList[2],Integer.parseInt(csvList[13]),Integer.parseInt(csvList[14]));\r\n            objects[i].brand(csvList[3]);\r\n            objects[i].productLine(csvList[4]);\r\n            objects[i].numOfCores(csvList[5]);\r\n            objects[i].procClkSpd(csvList[6]);\r\n            objects[i].graphClkSpd(csvList[7]);\r\n            objects[i].dimension(csvList[8]);\r\n            objects[i].resolution(csvList[9]);\r\n            objects[i].colour(csvList[10]);\r\n            objects[i].intrfce(csvList[11]);\r\n            objects[i].size(csvList[12]);\r\n\r\n            ComputerComponent computerComponent = objects[i].build();\r\n            listOfObjects.add(computerComponent);\r\n\r\n        }\r\n        return listOfObjects;\r\n    }\r\n\r\n    public static List<ComputerComponent> sortAndPrint(List<ComputerComponent> components) {\r\n\r\n        List<ComputerComponent> sortedListOfComponents = components.stream()\r\n                .sorted(Comparator.comparing(ComputerComponent::getBrand))\r\n                .sorted(Comparator.comparing(ComputerComponent::getName))\r\n                .sorted(Comparator.comparing(ComputerComponent::getCategory))\r\n                .collect(Collectors.toList());\r\n\r\n        String firstTenOfSortedList = \"\";\r\n\r\n        if(components.size()>=10) {\r\n            for (int i = 0; i < 10; i++) {\r\n                firstTenOfSortedList += sortedListOfComponents.get(i).getCategory() + \" \" + sortedListOfComponents.get(i).getName() + \" \" + sortedListOfComponents.get(i).getBrand() + \"\\n\";\r\n            }\r\n        }\r\n        System.out.println(\"Sorted by category, name and brand. Following components are the first 10 of this sorted list.\\n\" + firstTenOfSortedList);\r\n        return sortedListOfComponents;\r\n    }\r\n\r\n    public static int compute_and_print_avg_price_of_all_components(List<ComputerComponent> listOfObjects){\r\n\r\n        int totalPriceOfAllComponents = listOfObjects.stream()\r\n                .map(c -> c.getPrice()).mapToInt(num -> num).sum();\r\n        int averagePriceOfAllComponents = totalPriceOfAllComponents/listOfObjects.size();\r\n        System.out.println(\"Average price of all computer components: \"+averagePriceOfAllComponents);\r\n        return averagePriceOfAllComponents;\r\n    }\r\n\r\n    public static int compute_and_print_avg_price_of_CPU_components(List<ComputerComponent> listOfObjects){\r\n\r\n        int totalPriceOfAllComponents = listOfObjects.stream()\r\n                .filter(name -> name.getCategory()\r\n                .equals(\"CPU\"))\r\n                .map(c -> c.getPrice()).mapToInt(num -> num).sum();\r\n\r\n        int totalNumOfAllComponents = (int)listOfObjects.stream()\r\n                .filter(name -> name.getCategory()\r\n                        .equals(\"CPU\")).count();\r\n\r\n        int averagePriceOfAllComponents = totalPriceOfAllComponents/totalNumOfAllComponents;\r\n        System.out.println(\"Average price of all CPU components: \"+averagePriceOfAllComponents);\r\n        return averagePriceOfAllComponents;\r\n    }\r\n\r\n    public static String cheapestComponent(List<ComputerComponent> listOfObjects){\r\n\r\n        List<ComputerComponent> cheapestComponentObj = listOfObjects.stream()\r\n                .sorted(Comparator.comparing(ComputerComponent::getPrice)).collect(Collectors.toList());\r\n\r\n        System.out.println(\"Details of cheapest component: \"+cheapestComponentObj.get(0).toString());\r\n        return cheapestComponentObj.get(0).toString();\r\n    }\r\n\r\n    public static String printMostExpensiveOfEachCategory(List<ComputerComponent> listOfObjects){\r\n\r\n        return listOfObjects.stream()\r\n                .collect(Collectors.groupingBy(ComputerComponent::getCategory, Collectors.maxBy(Comparator.comparingInt(ComputerComponent::getPrice)))).toString();\r\n    }\r\n\r\n    public static String reportOfQuantityOfComponentsByCategory(List<ComputerComponent> listOfObjects){\r\n        return listOfObjects.stream()\r\n                .collect(\r\n                        Collectors.groupingBy(ComputerComponent::getCategory,Collectors.counting())\r\n                ).toString();\r\n    }\r\n\r\n    public static String reportOfQuantityOfComponentsByCategoryAndBrand(List<ComputerComponent> listOfObjects){\r\n        return listOfObjects.stream()\r\n                .collect(\r\n                        Collectors.groupingBy(ComputerComponent::getCategory,\r\n                                Collectors.groupingBy(ComputerComponent::getBrand, Collectors.counting()))\r\n                ).toString();\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/murex/retail/experience/Main.java	(revision 2525ebc8e147b4bbc6e23740858e64176adae7f6)
+++ src/main/java/com/murex/retail/experience/Main.java	(date 1580990638681)
@@ -86,13 +86,9 @@
                 .sorted(Comparator.comparing(ComputerComponent::getName))
                 .sorted(Comparator.comparing(ComputerComponent::getCategory))
                 .collect(Collectors.toList());
-
         String firstTenOfSortedList = "";
-
-        if(components.size()>=10) {
-            for (int i = 0; i < 10; i++) {
+        for (int i = 0; i < 10; i++) {
                 firstTenOfSortedList += sortedListOfComponents.get(i).getCategory() + " " + sortedListOfComponents.get(i).getName() + " " + sortedListOfComponents.get(i).getBrand() + "\n";
-            }
         }
         System.out.println("Sorted by category, name and brand. Following components are the first 10 of this sorted list.\n" + firstTenOfSortedList);
         return sortedListOfComponents;
