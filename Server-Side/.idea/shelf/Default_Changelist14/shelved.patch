Index: src/main/java/com/murex/retail/experience/inventory/InventoryController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n *  Copyright Murex S.A.S., 2003-2020. All Rights Reserved.\r\n * \r\n *  This software program is proprietary and confidential to Murex S.A.S and its affiliates (\"Murex\") and, without limiting the generality of the foregoing reservation of rights, shall not be accessed, used, reproduced or distributed without the\r\n *  express prior written consent of Murex and subject to the applicable Murex licensing terms. Any modification or removal of this copyright notice is expressly prohibited.\r\n */\r\npackage com.murex.retail.experience.inventory;\r\n\r\nimport java.util.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.UUID;\r\nimport java.util.stream.Collectors;\r\n\r\nimport javax.validation.Valid;\r\n\r\nimport static com.murex.retail.experience.Main.inventory;\r\nimport com.murex.retail.experience.components.ComputerComponent;\r\nimport com.murex.retail.experience.orders.Order;\r\nimport com.murex.retail.experience.orders.OrderManager;\r\nimport com.murex.retail.experience.persistence.Reader;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\n\r\n\r\n@RestController\r\npublic class InventoryController {\r\n\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n    //~ Methods \r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n\r\n    @Bean\r\n    public WebMvcConfigurer corsConfigurer() {\r\n        return new WebMvcConfigurer() {\r\n            @Override\r\n            public void addCorsMappings(CorsRegistry registry) {\r\n                registry.addMapping(\"/**\").allowedMethods(\"HEAD\", \"GET\", \"PUT\", \"POST\", \"DELETE\", \"PATCH\");\r\n            }\r\n        };\r\n    }\r\n\r\n    @GetMapping(\"/item_count\")\r\n    public int returnNumberOfItems() {\r\n        Map<UUID, ComputerComponent> map = inventory.getParsedInventory();\r\n        Reader reader = new Reader();\r\n        reader.getNumOfItems(map);\r\n        return reader.getNumOfItems(map);\r\n    }\r\n\r\n    @GetMapping(\"/search\")\r\n    public List<ComputerComponent> searchForComponent(@RequestParam(value = \"name\") String name) {\r\n        Reader reader = new Reader();\r\n        ComputerComponent cc = reader.findComponent(inventory.getParsedInventory(), name);\r\n        List<ComputerComponent> list = new ArrayList<>();\r\n        ;\r\n        list.add(cc);\r\n        return sortForGUI(list);\r\n    }\r\n\r\n    @GetMapping(\"/list_items\")\r\n    public List<ComputerComponent> listAllComponents() {\r\n        List<ComputerComponent> list = new ArrayList<>(inventory.getParsedInventory().values());\r\n        return sortForGUI(list);\r\n    }\r\n\r\n    public List<ComputerComponent> sortForGUI(List<ComputerComponent> list) {\r\n        return list.stream().sorted(Comparator.comparing(ComputerComponent::getBrand)).sorted(Comparator.comparing(ComputerComponent::getName)).sorted(Comparator.comparing(ComputerComponent::getCategory)).collect(Collectors\r\n            .toList());\r\n    }\r\n\r\n    @PostMapping(value = \"/checkout\")\r\n    public ResponseEntity getOrder(@Valid @RequestBody Order[] orders) {\r\n        System.out.println(\"Order received\");\r\n        OrderManager orderManager = new OrderManager(inventory);\r\n        if (orderManager.checkStock(orders)) {\r\n            orderManager.updateInventory(orders);\r\n        }\r\n        return ResponseEntity.ok().body(orders);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/murex/retail/experience/inventory/InventoryController.java	(revision 3ebb550827d3bb1046180d4775954a47b8eca6f9)
+++ src/main/java/com/murex/retail/experience/inventory/InventoryController.java	(date 1584145487365)
@@ -6,33 +6,61 @@
  */
 package com.murex.retail.experience.inventory;
 
+import java.time.LocalTime;
+
 import java.util.*;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import java.util.stream.Collectors;
 
 import javax.validation.Valid;
 
+import com.murex.retail.experience.Main;
 import static com.murex.retail.experience.Main.inventory;
 import com.murex.retail.experience.components.ComputerComponent;
 import com.murex.retail.experience.orders.Order;
+import com.murex.retail.experience.orders.OrderEvent;
+import com.murex.retail.experience.orders.OrderEventListener;
 import com.murex.retail.experience.orders.OrderManager;
 import com.murex.retail.experience.persistence.Reader;
 
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.context.annotation.Bean;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
 import org.springframework.web.servlet.config.annotation.CorsRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
+import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;
 
 
 @RestController
 public class InventoryController {
 
+    //~ ----------------------------------------------------------------------------------------------------------------
+    //~ Static fields/initializers
+    //~ ----------------------------------------------------------------------------------------------------------------
+
+    private static Order[] array;
+
+    //~ ----------------------------------------------------------------------------------------------------------------
+    //~ Instance fields
+    //~ ----------------------------------------------------------------------------------------------------------------
+
+    ExecutorService executorService = Executors.newFixedThreadPool(3);
+
+    @Autowired
+    private ApplicationEventPublisher applicationEventPublisher;
+
+    @Autowired
+    private OrderEventListener orderEventListener;
+
     //~ ----------------------------------------------------------------------------------------------------------------
-    //~ Methods 
+    //~ Methods
     //~ ----------------------------------------------------------------------------------------------------------------
 
     @Bean
@@ -76,12 +104,49 @@
 
     @PostMapping(value = "/checkout")
     public ResponseEntity getOrder(@Valid @RequestBody Order[] orders) {
-        System.out.println("Order received");
+        array = orders.clone();
+        System.out.print("orders: " + orders.length + "  array: " + array.length); //        OrderEvent orderEvent = new OrderEvent(this, "Order Received");
+//        applicationEventPublisher.publishEvent(orderEvent);
+//        OrderManager orderManager = new OrderManager(inventory);
+//        if (orderManager.checkStock(orders)) {
+//            OrderEvent orderEvent2 = new OrderEvent(this, "Order In-Progress");
+//            applicationEventPublisher.publishEvent(orderEvent2);
+//            orderManager.updateInventory(orders);
+//           orderManager.buildComputer();
+//        }
+        return ResponseEntity.ok().body(orders);
+    }
+
+    @GetMapping("/order_status")
+    public SseEmitter streamSseMvc() {
+        SseEmitter emitter = new SseEmitter();
+        createAndSendOrder("Order Received", emitter);
         OrderManager orderManager = new OrderManager(inventory);
-        if (orderManager.checkStock(orders)) {
-            orderManager.updateInventory(orders);
+        if (orderManager.checkStock(array)) {
+            createAndSendOrder("Order In-Progress", emitter);
+            orderManager.updateInventory(array);
+            orderManager.buildComputer();
+            createAndSendOrder("Order Ready", emitter);
         }
-        return ResponseEntity.ok().body(orders);
+        return emitter;
     }
+
+    public void emitterSender(OrderEvent orderEvent, SseEmitter sseEmitter) {
+
+        executorService.execute(() -> {
+            try {
+                SseEmitter.SseEventBuilder event = SseEmitter.event().data(orderEvent.getMessage());
+                sseEmitter.send(event);
+
+            } catch (Exception ex) {
+                sseEmitter.completeWithError(ex);
+            }
+        });
+    }
 
+    public void createAndSendOrder(String message, SseEmitter emitter) {
+        OrderEvent orderEvent = new OrderEvent(this, message);
+        applicationEventPublisher.publishEvent(orderEvent);
+        emitterSender(orderEvent, emitter);
+    }
 }
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>murex.dntp</groupId>\r\n    <artifactId>murex-retail-experience</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.2.4.RELEASE</version>\r\n    </parent>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web </artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.h2database</groupId>\r\n            <artifactId>h2</artifactId>\r\n            <version>1.4.200</version>\r\n        </dependency>\r\n        <dependency>\r\n        <groupId>org.hibernate</groupId>\r\n        <artifactId>hibernate-core</artifactId>\r\n        <version>5.4.12.Final</version>\r\n    </dependency>\r\n        <dependency>\r\n            <groupId>org.hibernate</groupId>\r\n            <artifactId>hibernate-entitymanager</artifactId>\r\n            <version>5.4.12.Final</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <version>8.0.15</version>\r\n            <scope>provided</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.apache.logging.log4j</groupId>\r\n            <artifactId>log4j-core</artifactId>\r\n            <version>2.11.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.junit.jupiter</groupId>\r\n            <artifactId>junit-jupiter</artifactId>\r\n            <version>RELEASE</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <artifactId>maven-surefire-plugin</artifactId>\r\n                <version>3.0.0-M3 </version>\r\n            </plugin>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <version>3.5.1</version>\r\n                <configuration>\r\n                    <source>1.8</source>\r\n                    <target>1.8</target>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision 3ebb550827d3bb1046180d4775954a47b8eca6f9)
+++ pom.xml	(date 1584102043831)
@@ -7,6 +7,7 @@
     <groupId>murex.dntp</groupId>
     <artifactId>murex-retail-experience</artifactId>
     <version>1.0-SNAPSHOT</version>
+
     <parent>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-parent</artifactId>
@@ -17,16 +18,17 @@
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-web </artifactId>
         </dependency>
+
         <dependency>
             <groupId>com.h2database</groupId>
             <artifactId>h2</artifactId>
             <version>1.4.200</version>
         </dependency>
         <dependency>
-        <groupId>org.hibernate</groupId>
-        <artifactId>hibernate-core</artifactId>
-        <version>5.4.12.Final</version>
-    </dependency>
+            <groupId>org.hibernate</groupId>
+            <artifactId>hibernate-core</artifactId>
+            <version>5.4.12.Final</version>
+        </dependency>
         <dependency>
             <groupId>org.hibernate</groupId>
             <artifactId>hibernate-entitymanager</artifactId>
@@ -49,6 +51,11 @@
             <version>RELEASE</version>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>flux</groupId>
+            <artifactId>flux</artifactId>
+            <version>2.1</version>
+        </dependency>
     </dependencies>
     <build>
         <plugins>
Index: src/main/java/com/murex/retail/experience/orders/OrderManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n *  Copyright Murex S.A.S., 2003-2020. All Rights Reserved.\r\n *\r\n *  This software program is proprietary and confidential to Murex S.A.S and its affiliates (\"Murex\") and, without limiting the generality of the foregoing reservation of rights, shall not be accessed, used, reproduced or distributed without the\r\n *  express prior written consent of Murex and subject to the applicable Murex licensing terms. Any modification or removal of this copyright notice is expressly prohibited.\r\n */\r\npackage com.murex.retail.experience.orders;\r\n\r\nimport com.murex.retail.experience.components.ComputerComponent;\r\nimport com.murex.retail.experience.inventory.Inventory;\r\n\r\n\r\npublic class OrderManager {\r\n\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n    //~ Static fields/initializers\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n\r\n    private static Inventory inventory;\r\n\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n    //~ Constructors\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n\r\n    public OrderManager(Inventory inventory) {\r\n        this.inventory = inventory;\r\n    }\r\n\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n    //~ Methods\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n\r\n    public boolean checkStock(Order[] orders) {\r\n        boolean flag = true;\r\n        for (Order order : orders) {\r\n            ComputerComponent computerComponent = inventory.searchInventoryById(order.getId());\r\n            if (order.getQuantity() > computerComponent.getQuantity()) {\r\n                System.out.println(\"Less or no stock for requested stock\");\r\n                flag = false;\r\n            }\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    public void updateInventory(Order[] orders) {\r\n        for (Order order : orders) {\r\n            ComputerComponent computerComponent = inventory.searchInventoryById(order.getId());\r\n            computerComponent.setQuantity(computerComponent.getQuantity() - order.getQuantity());\r\n            if (computerComponent.getQuantity() == 0) {\r\n                inventory.getParsedInventory().remove(computerComponent.getUuid());\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/murex/retail/experience/orders/OrderManager.java	(revision 3ebb550827d3bb1046180d4775954a47b8eca6f9)
+++ src/main/java/com/murex/retail/experience/orders/OrderManager.java	(date 1584146043992)
@@ -33,7 +33,7 @@
     public boolean checkStock(Order[] orders) {
         boolean flag = true;
         for (Order order : orders) {
-            ComputerComponent computerComponent = inventory.searchInventoryById(order.getId());
+            ComputerComponent computerComponent = inventory.searchInventoryById(order.getUuid());
             if (order.getQuantity() > computerComponent.getQuantity()) {
                 System.out.println("Less or no stock for requested stock");
                 flag = false;
@@ -44,11 +44,19 @@
 
     public void updateInventory(Order[] orders) {
         for (Order order : orders) {
-            ComputerComponent computerComponent = inventory.searchInventoryById(order.getId());
+            ComputerComponent computerComponent = inventory.searchInventoryById(order.getUuid());
             computerComponent.setQuantity(computerComponent.getQuantity() - order.getQuantity());
             if (computerComponent.getQuantity() == 0) {
                 inventory.getParsedInventory().remove(computerComponent.getUuid());
             }
         }
     }
+
+    public void buildComputer() {
+        try {
+            Thread.sleep(1000);
+        } catch (InterruptedException ex) {
+            Thread.currentThread().interrupt();
+        }
+    }
 }
Index: src/main/java/com/murex/retail/experience/orders/Order.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n *  Copyright Murex S.A.S., 2003-2020. All Rights Reserved.\r\n *\r\n *  This software program is proprietary and confidential to Murex S.A.S and its affiliates (\"Murex\") and, without limiting the generality of the foregoing reservation of rights, shall not be accessed, used, reproduced or distributed without the\r\n *  express prior written consent of Murex and subject to the applicable Murex licensing terms. Any modification or removal of this copyright notice is expressly prohibited.\r\n */\r\npackage com.murex.retail.experience.orders;\r\n\r\nimport java.util.UUID;\r\n\r\n\r\npublic class Order {\r\n\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n    //~ Instance fields\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n\r\n    private final UUID id;\r\n    private final String category;\r\n    private final int price;\r\n    private final int quantity;\r\n\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n    //~ Constructors\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n\r\n    public Order(UUID id, String category, int price, int quantity) {\r\n        this.id = id;\r\n        this.category = category;\r\n        this.price = price;\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n    //~ Methods\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n\r\n    public UUID getId() {\r\n        return id;\r\n    }\r\n\r\n    public String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    public int getPrice() {\r\n        return price;\r\n    }\r\n\r\n    public int getQuantity() {\r\n        return quantity;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/murex/retail/experience/orders/Order.java	(revision 3ebb550827d3bb1046180d4775954a47b8eca6f9)
+++ src/main/java/com/murex/retail/experience/orders/Order.java	(date 1583836531009)
@@ -15,7 +15,7 @@
     //~ Instance fields
     //~ ----------------------------------------------------------------------------------------------------------------
 
-    private final UUID id;
+    private final UUID uuid;
     private final String category;
     private final int price;
     private final int quantity;
@@ -24,8 +24,8 @@
     //~ Constructors
     //~ ----------------------------------------------------------------------------------------------------------------
 
-    public Order(UUID id, String category, int price, int quantity) {
-        this.id = id;
+    public Order(UUID uuid, String category, int price, int quantity) {
+        this.uuid = uuid;
         this.category = category;
         this.price = price;
         this.quantity = quantity;
@@ -35,8 +35,8 @@
     //~ Methods
     //~ ----------------------------------------------------------------------------------------------------------------
 
-    public UUID getId() {
-        return id;
+    public UUID getUuid() {
+        return uuid;
     }
 
     public String getCategory() {
Index: src/main/java/com/murex/retail/experience/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n *  Copyright Murex S.A.S., 2003-2020. All Rights Reserved.\r\n *\r\n *  This software program is proprietary and confidential to Murex S.A.S and its affiliates (\"Murex\") and, without limiting the generality of the foregoing reservation of rights, shall not be accessed, used, reproduced or distributed without the\r\n *  express prior written consent of Murex and subject to the applicable Murex licensing terms. Any modification or removal of this copyright notice is expressly prohibited.\r\n */\r\npackage com.murex.retail.experience;\r\n\r\nimport java.io.IOException;\r\n\r\nimport javax.persistence.EntityManager;\r\nimport javax.persistence.EntityManagerFactory;\r\nimport javax.persistence.Persistence;\r\n\r\nimport com.murex.retail.experience.components.ComputerComponent;\r\nimport com.murex.retail.experience.inventory.CsvPersistenceApi;\r\nimport com.murex.retail.experience.inventory.Inventory;\r\nimport com.murex.retail.experience.persistence.InventoryPersistenceApi;\r\nimport com.murex.retail.experience.persistence.JPAUtil;\r\n\r\nimport org.apache.logging.log4j.LogManager;\r\nimport org.apache.logging.log4j.Logger;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n\r\n@SpringBootApplication\r\npublic class Main {\r\n\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n    //~ Static fields/initializers\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n\r\n    private static final Logger LOGGER = LogManager.getLogger(Main.class);\r\n    private static final String FILEPATH = \"src/main/resources/Inventory.csv\";\r\n    static EntityManagerFactory factory;\r\n    static EntityManager entityManager;\r\n    public static Inventory inventory;\r\n\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n    //~ Methods\r\n    //~ ----------------------------------------------------------------------------------------------------------------\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        SpringApplication.run(Main.class, args);\r\n        factory = Persistence.createEntityManagerFactory(\"ComputerComponents\");\r\n        entityManager = factory.createEntityManager();\r\n        PersistenceApi csvPersistenceApi = new CsvPersistenceApi(FILEPATH);\r\n        inventory = csvPersistenceApi.load();\r\n\r\n        Analyser analyser = new Analyser();\r\n        // analyser.performAnalysis(inventory);\r\n\r\n        PersistenceApi inventoryPersistenceApi = new InventoryPersistenceApi(entityManager);\r\n        inventoryPersistenceApi.save(inventory.getParsedInventory());\r\n\r\n        Inventory inventoryLoadedFromDB = inventoryPersistenceApi.load();\r\n\r\n        analyser.performAnalysis(inventoryLoadedFromDB);\r\n        entityManager.close();\r\n        JPAUtil.shutdown();\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/murex/retail/experience/Main.java	(revision 3ebb550827d3bb1046180d4775954a47b8eca6f9)
+++ src/main/java/com/murex/retail/experience/Main.java	(date 1584028676562)
@@ -35,7 +35,7 @@
     private static final Logger LOGGER = LogManager.getLogger(Main.class);
     private static final String FILEPATH = "src/main/resources/Inventory.csv";
     static EntityManagerFactory factory;
-    static EntityManager entityManager;
+    public static EntityManager entityManager;
     public static Inventory inventory;
 
     //~ ----------------------------------------------------------------------------------------------------------------
